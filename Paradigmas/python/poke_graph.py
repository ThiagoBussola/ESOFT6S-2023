# -*- coding: utf-8 -*-
"""Poke-Graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xP_3LHINOhr2BEu3FbMNbtjIUhAfhClx
"""

!pip install plotly --upgrade
!pip install pandas
!pip install numpy
!pip install seaborn
!pip install matplotlib
!pip install plotly

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

pokemon_data = pd.read_csv('Pokemon_2.csv')

# Liste os Pokémon por geração
generation_pokemon = pokemon_data['Generation'].value_counts().sort_index()
print("Pokémon por Geração:")
print(generation_pokemon)

# Liste todos os Pokémon lendários
legendary_pokemon = pokemon_data[pokemon_data['Legendary'] == True]
print("\nPokémon Lendários:")
print(legendary_pokemon[['Name', 'Legendary']])

# Crie gráficos com Pandas para visualizar os Pokémon por geração
generation_pokemon.plot(kind='bar', color='skyblue')
plt.title("Número de Pokémon por Geração")
plt.xlabel("Geração")
plt.ylabel("Número de Pokémon")
plt.show()

# Crie um gráfico de pizza para mostrar a proporção de Pokémon lendários
legendary_counts = [len(legendary_pokemon), len(pokemon_data) - len(legendary_pokemon)]
labels = ['Lendários', 'Não Lendários']
colors = ['gold', 'lightcoral']

plt.pie(legendary_counts, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.axis('equal')
plt.title("Proporção de Pokémon Lendários")
plt.show()

# 1. Gráfico de barras que mostra a quantidade de Pokémon por tipo
type_counts = pokemon_data['Type 1'].value_counts()
plt.figure(figsize=(12, 6))
plt.bar(type_counts.index, type_counts.values, color='skyblue')
plt.title("Quantidade de Pokémon por Tipo")
plt.xlabel("Tipo")
plt.ylabel("Número de Pokémon")
plt.xticks(rotation=90)
plt.show()

# 2. Gráfico de barras que mostra a média de Pokémon por tipo
mean_pokemon_per_type = pokemon_data.groupby('Type 1')['Name'].count().mean()
plt.figure(figsize=(12, 6))
plt.bar(type_counts.index, [mean_pokemon_per_type] * len(type_counts), color='lightcoral', label='Média por Tipo')
plt.title("Média de Pokémon por Tipo")
plt.xlabel("Tipo")
plt.ylabel("Número de Pokémon (Média)")
plt.xticks(rotation=90)
plt.legend()
plt.show()

# 3. Gráfico de barras que exibe os 10 Pokémon mais fortes com base em seus status base
top_10_strongest_pokemon = pokemon_data.nlargest(10, 'Total')
plt.figure(figsize=(12, 6))
plt.bar(top_10_strongest_pokemon['Name'], top_10_strongest_pokemon['Total'], color='gold')
plt.title("Top 10 Pokémon Mais Fortes (Status Base)")
plt.xlabel("Nome do Pokémon")
plt.ylabel("Total de Status Base")
plt.xticks(rotation=90)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Carregue o dataset dos Pokémon
pokemon_data = pd.read_csv('Pokemon_2.csv')

# Exclua os Mega Pokémon das análises
filtered_pokemon_data = pokemon_data[~pokemon_data['Name'].str.contains('Mega ')]

# 1. Gráficos de barras que mostram a quantidade de Pokémon por tipo, separado por geração (sem Mega Pokémon)
generations = filtered_pokemon_data['Generation'].unique()

for generation in generations:
    type_counts = filtered_pokemon_data[filtered_pokemon_data['Generation'] == generation].groupby('Type 1')['Name'].count()
    plt.figure(figsize=(12, 6))
    plt.bar(type_counts.index, type_counts.values, color='skyblue')
    plt.title(f"Quantidade de Pokémon por Tipo na Geração {generation} (Sem Mega Pokémon)")
    plt.xlabel("Tipo")
    plt.ylabel("Número de Pokémon")
    plt.xticks(rotation=90)
    plt.show()

# 2. Gráficos de barras que mostram a média de Pokémon por tipo, separado por geração (sem Mega Pokémon)
for generation in generations:
    mean_pokemon_per_type = filtered_pokemon_data[filtered_pokemon_data['Generation'] == generation].groupby('Type 1')['Name'].count().mean()
    type_counts = filtered_pokemon_data[filtered_pokemon_data['Generation'] == generation].groupby('Type 1')['Name'].count()

    plt.figure(figsize=(12, 6))
    plt.bar(type_counts.index, [mean_pokemon_per_type] * len(type_counts), color='lightcoral', label='Média por Tipo')
    plt.title(f"Média de Pokémon por Tipo na Geração {generation} (Sem Mega Pokémon)")
    plt.xlabel("Tipo")
    plt.ylabel("Número de Pokémon (Média)")
    plt.xticks(rotation=90)
    plt.legend()
    plt.show()

# 3. Os 10 Pokémon mais fortes por geração, excluindo Mega Pokémon
for generation in generations:
    top_10_strongest_pokemon = filtered_pokemon_data[filtered_pokemon_data['Generation'] == generation].nlargest(10, 'Total')
    plt.figure(figsize=(12, 6))
    plt.bar(top_10_strongest_pokemon['Name'], top_10_strongest_pokemon['Total'], color='gold')
    plt.title(f"Top 10 Pokémon Mais Fortes na Geração {generation} (Sem Mega Pokémon)")
    plt.xlabel("Nome do Pokémon")
    plt.ylabel("Total de Status Base")
    plt.xticks(rotation=90)
    plt.show()

# 1. Imprimir a quantidade de Pokémon por tipo, separado por geração (sem Mega Pokémon)
# 2. Imprimir a média de Pokémon por tipo, separado por geração (sem Mega Pokémon)
# 4. Imprimir a média em número de Pokémon por tipo, separado por geração (sem Mega Pokémon)
generations = filtered_pokemon_data['Generation'].unique()

for generation in generations:
    type_counts = filtered_pokemon_data[filtered_pokemon_data['Generation'] == generation].groupby('Type 1')['Name'].count()
    mean_pokemon_per_type = filtered_pokemon_data[filtered_pokemon_data['Generation'] == generation].groupby('Type 1')['Name'].count().mean()

    print(f"Geração {generation} - Quantidade de Pokémon por Tipo:")
    print(type_counts)

    print(f"Geração {generation} - Média de Pokémon por Tipo:")
    print(f"Média: {int(mean_pokemon_per_type)}")

# 3. Os 10 Pokémon mais fortes por geração (sem Mega Pokémon)
for generation in generations:
    top_10_strongest_pokemon = filtered_pokemon_data[filtered_pokemon_data['Generation'] == generation].nlargest(10, 'Total')
    print(f"Geração {generation} - Top 10 Pokémon Mais Fortes:")
    print(top_10_strongest_pokemon[['Name', 'Total']])